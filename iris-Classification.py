# -*- coding: utf-8 -*-
"""Iris.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t5xUDI5CWP78g8pkKhzPN83z4R7q1-TC
"""

# we import those 2 package pd for importing the csv file and pyplot for plots
import pandas as pd
from matplotlib import pyplot

# importing the dataset with specific columns = names 
url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/iris.csv"
names = ['sepal-length', 'sepal-width', 'petal-length', 'petal-width', 'class']
dataset = pd.read_csv(url, names = names)
dataset

# let's get some information about the data 
dataset.shape
dataset.describe()
#we can see that all the numbers are between 0 and 8

# let's check the NaN cases
dataset.info()

# the distribution of our data 
print(dataset.groupby('class').size())

"""# **Univariate plots **"""

# box and whisker plots
dataset.plot(kind='box', subplots=True, layout=(2,2), sharex=False, sharey=False)
pyplot.show()

#histogram
dataset.hist()
pyplot.show()

"""# Multivariante Plots"""

from pandas.plotting import scatter_matrix

# scatter pot matrix
scatter_matrix(dataset)
pyplot.show()

# let's split our dataset to features and target which is in our case "class", we could use dataset[['class']] and drop it for the features
from sklearn.model_selection import train_test_split
array = dataset.values
x = array[:, 0:4]
y = array[:,4]
x_train, x_validation, y_train, y_validation = train_test_split (x, y, test_size=0.2)

# packages for the models that we will use and for checking the efficiency of our models so as for the cross validation
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC

from sklearn.model_selection import cross_val_score
from sklearn.model_selection import StratifiedKFold

from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score

# we will make 3 arrays : the first one for our models, then one for the results and the last one will contain the names of algorithms
models = []
# we will chose Naive Bayes - Linear Regression, Support Vector Machines and the decision Trees
models.append(('LR', LogisticRegression(solver='liblinear', multi_class='ovr')))
models.append(('LDA', LinearDiscriminantAnalysis()))
models.append(('CART', DecisionTreeClassifier()))
models.append(('NB', GaussianNB()))
models.append(('SVM', SVC(gamma='auto')))

results = []
names = []
for name, model in models:
  #we will split the training set to 10 as kross valditaion, this will make the model train on 9 splits and check on one 
  kfold = StratifiedKFold(n_splits=10, random_state=1, shuffle=True)
  cv_result = cross_val_score(model, x_train, y_train, cv=kfold, scoring='accuracy')
  results.append(cv_result)
  names.append(name)
  print(f'{name} : {cv_result.mean()} ({cv_result.std()})')
  # as we can see, all the models are doing well and the more efficient is SVMs

#
pyplot.boxplot(results, labels=names)
pyplot.title('Algo Comparison')
pyplot.show()

# Let's make our prediction using SVM
model = SVC(gamma='auto')
model.fit(x_train, y_train)
predictions = model.predict(x_validation)

print(accuracy_score(y_validation, predictions))
print(confusion_matrix(y_validation, predictions))
print(classification_report(y_validation, predictions))
# So our accuracy is 0.96666, the confusion mmatrix tell us that the model maked 1 mistake

